// This source code is subject to the following terms: Copyright (c) 2022, Comfy Capital. All rights reserved.
// Â© ComfyCapital

// @version = 5

indicator("Global Sentiment Indicator v2.0")

// Stablecoins Dominance oscillator

sdo_request = request.security("((CRYPTOCAP:USDT+CRYPTOCAP:USDC+CRYPTOCAP:UST+CRYPTOCAP:DAI)/CRYPTOCAP:TOTAL)", "",  -(close))

sdo_period = input.int(192, title = "SDO S. Length", minval = 1, group = "Stablecoins Dominance oscillator")
sdo_smooth = input.int(1, title = "SDO S. Smoothing", minval = 1, group = "Stablecoins Dominance oscillator")

sdo_oscillator = ta.sma(ta.stoch(sdo_request, sdo_request, sdo_request, sdo_period), sdo_smooth)

// BTC 30 Days ROI

roc_source = input(close, "ROC Source", group = "BTC 30 Days ROI")
roc_length = input.int(30, minval=1, title = "ROC Length", group = "BTC 30 Days ROI")
roc = 100 * (roc_source - roc_source[roc_length])/roc_source[roc_length]

// ROC STOCH

roc_period = input.int(192, title = "SDO S. Length", minval = 1, group = "BTC 30 Days ROI")
roc_smooth = input.int(1, title = "SDO S. Smoothing", minval = 1, group = "BTC 30 Days ROI")

roc_oscillator = ta.sma(ta.stoch(roc, roc, roc, roc_period), roc_smooth)

// Global Basis Indicator

gbi_source = input(close, title = "GBI Source", group = "Global Basis Indicator")

gbi_sym_1 = input.symbol("(BINANCE:BTCPERP+FTX:BTCPERP)/2", "GBI Symbol 1", group = "Global Basis Indicator")
gbi_sym_2 = input.symbol("COINBASE:BTCUSD", "GBI Symbol 2", group = "Global Basis Indicator")
gbi_request_1 = request.security(gbi_sym_1, "", gbi_source)
gbi_request_2 = request.security(gbi_sym_2, "", gbi_source)

gbi_basis = gbi_request_1 - gbi_request_2

// GBI SMMA

gbi_smma_length = input(7, title = "GBI SMMA Length", group = "BTC 30 Days ROI")
gbi_smma = ta.sma(gbi_basis, gbi_smma_length)
gbi_smma := na(gbi_smma[1]) ? ta.sma(gbi_basis, gbi_smma_length) : (gbi_smma[1] * (gbi_smma_length - 1) + gbi_basis) / gbi_smma_length

// GBI STOCH

gbi_period = input.int(192, title = "SDO S. Length", minval = 1, group = "BTC 30 Days ROI")
gbi_smooth = input.int(1, title = "SDO S. Smoothing", minval = 1, group = "BTC 30 Days ROI")

gbi_oscillator = ta.sma(ta.stoch(gbi_smma, gbi_smma, gbi_smma, gbi_period), gbi_smooth)

// AVG S. Oscillator

avg_oscillator = math.avg(sdo_oscillator, roc_oscillator, gbi_oscillator)

plot(avg_oscillator, color = #202020)

// Background
h1 = hline(100, "Band", color = color.rgb(32, 32, 32, 90), linestyle = hline.style_dashed)
h2 = hline(80, "Band", color = color.rgb(32, 32, 32, 90), linestyle = hline.style_dashed)
h3 = hline(60, "Band", color = color.rgb(32, 32, 32, 90), linestyle = hline.style_dashed)
h4 = hline(40, "Band", color = color.rgb(32, 32, 32, 90), linestyle = hline.style_dashed)
h5 = hline(20, "Band", color = color.rgb(32, 32, 32, 90), linestyle = hline.style_dashed)
h6 = hline(0, "Band", color = color.rgb(32, 32, 32, 90), linestyle = hline.style_dashed)
fill(h1, h2, color = color.rgb(242, 54, 69, 92), title = "Background")
fill(h2, h3, color = color.rgb(248, 121, 18, 92), title = "Background")
fill(h3, h4, color = color.rgb(255, 241, 118, 92), title = "Background")
fill(h4, h5, color = color.rgb(42, 146, 197, 92), title = "Background")
fill(h5, h6, color = color.rgb(76, 175, 80, 92), title = "Background")
